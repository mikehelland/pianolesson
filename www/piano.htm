<!DOCTYPE html>
<html>
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
        <meta http-equiv="Pragma" content="no-cache" />
        <meta http-equiv="Expires" content="0" />
        <link rel="stylesheet" href="/css/viewer.css" type="text/css" />
        <link rel="stylesheet" href="chat.css" type="text/css" />
        <style>
            a {color:white;}a:visited {color:white;}
            #help-link {display: none;}

            #work-area {
                position:absolute;
                top: 2px;
                bottom: 2px;
                right:5px;
                background-color: #111;
            }
            #join-area {
                display:none;
            }
            #standard, #view-controls {
                display:block;
            }

            #error-log-box {
                display:none;
                position:fixed;
                right:0px;
                top:40px;
                width:33%;
                background-color: #202020;
                padding:4px;
                min-height: 300px;
            }
            #error-log {
                background-color: #EEEEEE;
                color:black;
                padding:4px;
            }
            #big-piano {
                padding: 0;
                box-sizing: border-box;
                width: 100%;
                height:200px;
            }

            video {
                -webkit-transform: scaleX(-1);
                transform: scaleX(-1);
            }

            @media all and (orientation:landscape) {
                #work-area {
                    left:34%;
                }
            }

            @media all and (orientation:portrait) {
                #work-area {
                    left:50%;
                }
            }

            #demo {
                display:none;
                text-align: center;
                padding: 15px 5px;
                border: 1px solid black;
                flex-grow: 1;
                box-sizing: border-box;
            }

            #share-url {
                box-sizing: border-box;
            }

            .big-button, .big-button-buy {
                display: inline-block;
                font-family: Helvetica, Arial, sans-serif;
                font-size: 18px;
                line-height: 48px;
                height: 48px;
                padding-left: 48px;
                padding-right: 48px;
                color: #ffffff;
                min-width: 165px;
                background-color: #008800;
                border-radius: 4px;
                text-align: center;
                box-shadow: 0 0 0 1px rgba(0,0,0,.1) inset;
            }

            .materials-dialog {
                border: 1px solid black;
                background-color: #404040;
                width: 50%;
                height: 60%;
                padding: 10px;
                overflow: auto;
            }
            #materials-button {
                display:none;
            }
            #share-url {
                width:100%;
            }
        </style>
    </head>
    <body>
        <div id="main-body">
        <div id="join-area">
            <!--<div id="room-name-caption">Room: </div> 
            <p id="room-name-area"><select id="room-name-input"> 
                    <option>public</option>
                </select>
            </p>
            <div id="user-name-caption">Screen name: </div> 
            <p id="user-name-area"><input id="user-name-input"></p>
        -->
            <p id="tips-caption">Tips:</p>
            <ul>
                <li>Wear Headphones to avoid feedback!</li>
                <li>MIDI works on Chrome</li>
                <li>Your computer keyboard plays notes too</li>
                <li id="apple-tip">Touch the Play button if a video doesn't auto-start</li>
            </ul>
            <button id="join-button">Ready!</button>    
            
        </div>

        <div id="view-controls">
            <button id="disconnect-button">Disconnect</button>
            <!--Settings: <select id="select-instrument"><select>-->
            <button id="fullscreen-button">Fullscreen</button>
            -
            <button id="materials-button">Materials</button>    
            Pen: <input type="color" id="doodle-color" value="#ff0000">
            Width: <input type="number" id="doodle-width" min="1" max="40" value="20">
            <button id="line-button">&minus;</button>    
            <button id="square-button">&#9632;</button>
            -
            <button id="work-box-undo-button">Undo</button>    
            <button id="work-box-clear-button">Clear</button>
            -
            <button id="error-log-button">Log</button>
            -
            <a id="help-link" href="mailto:info@bspoke.chat">info@bspoke.chat</a>
            
        </div>
        
        <div id="standard">
            <div id="user-list">
                <div id="you" class="user-panel">
                    <div id="your-name" class="user-name"></div>
                </div>    
                <div id="demo" class="user-panel">
                    Share this link with a student and start teaching:
                    <br>
                    <br>
                    <input id="share-url">
                    <br>
                    <br>
                    questions?
                    <br>
                    <br>
                    <a href="mailto:info@bspoke.chat">info@bspoke.chat</a>
                    <!--<p>Piano Music Room Demo</p>
                    <p>
                        This is where your student would appear.
                    </p>
                    <p>
                        You can rent this room for $15 for one month and be teaching in no time!
                    </p>

                    <a href="/rent_music_room_month.htm" class="big-button-buy">Go To Purchase Page</a>

                    <p>
                    Have questions? Click below to see if someone is avialable to help live in your session.
                    </p>

                    <a id="assistance-button" href="#" class="big-button-buy">Request Assistance</a>
                    -->
                </div> 


            </div>

            <div id="work-area">
            </div>
    
        </div>

        <div id="big-piano">
        </div>

        </div>


        <div id="error-log-box"><div id="error-log"></div></div>
        <div id="activity-log"></div>

        <script>

        var isErrorLogShowing = false
        var errorLogButton = document.getElementById("error-log-button")
        var errorLogBox = document.getElementById("error-log-box")
        var errorLog = document.getElementById("error-log")

        var logError = message => {
            errorLogButton.style.color = "red"
            var div = document.createElement("div")
            div.innerHTML = message.split("\n").join("<br>")
            errorLog.appendChild(div)
        }

        window.onerror = (msg, file, line) => {
            logError(msg + "<br>" + line + " in " + file)
            console.error(msg, file, line)
            return true
        }

        errorLogButton.onclick = e => {
            errorLogBox.style.display = isErrorLogShowing ? "none" : "block"
            isErrorLogShowing = !isErrorLogShowing
        }

        </script>

        <script src='https://surikov.github.io/webaudiofont/npm/dist/WebAudioFontPlayer.js'></script>
		
        <!--<script src="/socket.io/socket.io.js"></script>-->
        <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
        <script src="/js/omgrtc.js"></script>
        <script src="/js/omgservice.js"></script>
        <script src="/apps/music/js/omgservice_music.js"></script>
        <!--<script src="/apps/music/js/omgclasses.js"></script>-->
        
        <script src="/apps/music/js/omusic.js" type="module"></script>
        
        <script src="/apps/music/js/libs/peakmeter_basic.js"></script>
        <script src="/apps/music/js/webmidi.js"></script>
        <script src="/apps/music/js/piano_surface.js"></script>
        <script src="chat-work-box-player.js"></script>
        <script src="chat-work-box.js"></script>
        <!--<script src="chat.js"></script>-->
        
        <script src="/js/searchbox.js"></script>

        <script type="module">
        import OMGMusicChat from "./chat.js"
        var isTeacher = false
        var roomName = ""
        var userName
        var demo
        omg.getContext().then(ctx => {

            if (ctx.pageParams.novideo) {
                rt.suppressLocalVideo = true //window.location.host.startsWith("localhost")
            }
            roomName = "t=" + encodeURIComponent(ctx.pageParams.t) + "&s=" + encodeURIComponent(ctx.pageParams.s)
            if (ctx.pageParams.t === "demo") {
                var today = new Date()
                userName = "demo" + Math.floor((Math.random() * 1000)) + "_" + Date.now() 
                roomName = "t=" + encodeURIComponent(userName) + "&s=" + encodeURIComponent(ctx.pageParams.s)
                demo = true

                setupMaterialsButton()
                document.getElementById("share-url").value = window.location.origin + window.location.pathname + "?" + roomName
            }
            else if (!ctx.user) {
                // no user, go to student mode
                userName = ctx.pageParams.s || "student"
            }
            else if (ctx.user.username === ctx.pageParams.t) {
                isTeacher = true
                userName = ctx.pageParams.t

                setupMaterialsButton()
            }
            else {
                console.warn("hello?")
                userName = ""
                // maybe a student is logged in? only teachers should have logins
            }
            
            var piano = new PianoSurface(document.getElementById("big-piano"))
            musicChat = new OMGMusicChat(rt, piano)
            musicChat.useSoundFont = true
            musicChat.setupPlayer()
            musicChat.isTeacher = isTeacher

            join()
        })

        var userListEl = document.getElementById('user-list')

        var rt = new OMGRealTime()
        rt.acceptAllCalls = true

        var activityLog = document.getElementById("activity-log")
        var log = text => {
            console.log(text)
            activityLog.innerHTML = text + "<br>" + activityLog.innerHTML
            //activityLog.innerHTML += text + "<br>"
        }

        rt.onlog = (text) => {
            //log(text)
        }

        var musicChat

        var you = {div: document.getElementById("you")}
        var controls = document.getElementById("view-controls")
        var join = () => {
        
            roomName = window.location.pathname + "?" + roomName
            
            document.getElementById("your-name").innerHTML = userName

            rt.getUserMedia(video => {
                you.div.appendChild(video)
                you.video = video
                you.video.style.width = "25%"
                rt.join(roomName, userName, {type: "CHAT"})
            })
            //joinArea.style.display = "none"
            //controls.style.display = "block"
            //disconnectButton.style.display = "block"
            //standard.style.display = "block"

        }

        var disconnectButton = document.getElementById("disconnect-button")
        disconnectButton.onclick = () => {
            rt.closeConnections()
            rt.stopMedia()
            rt.leave()
            userListEl.innerHTML = "(Disconnected)"
            //setTimeout(() => {window.location = "thankyou.htm"}, 250)
        }
    
        var workBoxDiv = document.getElementById("work-area")
        var workBox

        rt.onprejoined = (room) => {
            var data = {
                "type": "CHAT_WORK_BOX",
                "layers": [
                ],
            }
            
            if (!workBox) {
                workBox = new ChatWorkBox({rt, div: workBoxDiv, data})
            }
        }

        rt.onjoined = (room) => {
            console.log("onjoined!!!!!!")
            
            musicChat.setupLocalUser(you)

            disconnectButton.innerHTML = "Disconnect"
            for (var user in room.users) {
                if (!room.users[user].peerConnection) {
                    rt.callUser(user)
                }
            }

            if (demo) {
                showDemoArea()
                workBox.addBackground({type:"IMAGE", url:"https://bspoke.chat/uploads/4/14/twinkle.png"}, true)
            }
            
        }

        
        rt.onnewuser = (name, user) => {
            if (demo) {
                document.getElementById("demo").style.display = "none"
            }

            console.log(name + "joined")
            log(name + " joined")
            var userEl = document.createElement("div")
            userEl.className = "user-panel"
            var nameEl = document.createElement("div")
            nameEl.className = "user-name"
            nameEl.innerHTML = name
            var videoEl = user.video
            userEl.appendChild(nameEl)
            userEl.appendChild(videoEl)
            userListEl.appendChild(userEl)
            user.div = userEl

            musicChat.setupUser(user)

            if (isTeacher && workBox.meme.background && workBox.meme.background.thing) {
                workBox.send("setBackground", workBox.meme.background.thing)
            }
        }
        
        rt.onuserleft = (name, user) => {
            log(name + " left")
            userListEl.removeChild(user.div)
        }

        rt.onuserdisconnected = (name, user) => {
            if (user.disconnected && user.peerConnection.connectionState !== "connected") {
                user.div.style.display = "none"
            }
        }
        rt.onuservideodisconnected = rt.onuserdisconnected

        rt.onuserreconnected = (name, user) => {
            user.div.style.display = "block"
            if (isTeacher && workBox.meme.background && workBox.meme.background.thing) {
                workBox.send("setBackground", workBox.meme.background.thing)
            }
        }
        
        rt.ondisconnect = () => {
            //connectedStatusEl.innerHTML = "not connected"
            console.log("disconnected")
            disconnectButton.innerHTML = "Disconnect."
            //disconnectButton.style.display = "none"
            //joinArea.style.display = "block"
        };

        var fullscreen = false
        document.getElementById("fullscreen-button").onclick = (e) => {
            if (fullscreen) {
                document.exitFullscreen();
            }
            else {
                document.body.requestFullscreen();
            }
            fullscreen = !fullscreen
        }

        

        rt.oncommand = (data) => {
            
        }

        function showDemoArea() {
            document.getElementById("help-link").style.display = "inline"
            document.getElementById("demo").style.display = "block"
        }

        if (navigator.userAgent.indexOf("iPhone") > -1 ||
            navigator.userAgent.indexOf("iPad") > -1 ||
            navigator.userAgent.indexOf("Mac OS X") > -1) {
                document.getElementById("apple-tip").style.visibility = "visible"
            }

       
        /*var assistanceButton = document.getElementById("assistance-button")
        assistanceButton.onclick = e => {
            assistanceButton.innerHTML = "Checking"
            var t = 0 
            var wait = 5
            var handle = setInterval(() => {
                assistanceButton.innerHTML += "."
                t++
                if (t === wait) {
                    clearInterval(handle)
                    assistanceButton.innerHTML = "No one is available right now"
                }
            }, 1000)
        }*/

        function setupMaterialsButton() {
            var materialsButton = document.getElementById("materials-button")
            materialsButton.style.display = "inline"
            var isShowing = false
            var div
            materialsButton.onclick = e => {
                if (isShowing) {
                    div.style.display = "none"
                    document.body.removeChild(div)
                    isShowing = false
                    return
                }

                div = document.createElement("div")
                div.className = "materials-dialog"
                document.body.appendChild(div)
                var clearDialog = omg.ui.showDialog(div)

                var searchBox = new OMGSearchBox({div, types:["IMAGESET"]})
                searchBox.onclickcontent = e => {
                    workBox.addBackground({type: "IMAGE", url: e.data.set[0].url}, true)
                    clearDialog()
                }
                searchBox.search()

            }
        
        }
        </script>
    </body>
</html>