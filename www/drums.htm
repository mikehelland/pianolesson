<!DOCTYPE html>
<html>
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
        <meta http-equiv="Pragma" content="no-cache" />
        <meta http-equiv="Expires" content="0" />
        <link rel="stylesheet" href="chat.css" type="text/css" />
        <link rel="stylesheet" href="/apps/dawesome/dawesome.css" type="text/css" />
        <link rel="stylesheet" href="/css/window_manager.css" type="text/css" />
        <style>
            #join-area {
                display:none;
            }
            #standard, #view-controls {
                display:block;
            }

            #error-log-box {
                display:none;
                position:fixed;
                right:0px;
                top:40px;
                width:33%;
                background-color: #202020;
                padding:4px;
                min-height: 300px;
            }
            #error-log {
                background-color: #EEEEEE;
                color:black;
                padding:4px;
            }
            #big-piano {
                padding: 0;
                box-sizing: border-box;
                position:absolute;
                top: 2px;
                bottom: 2px;
                right:5px;
                left:33%;
                background-color: #111;
            }

            #work-area {
                height:33%;
            }

            .drumset-drum {
                display: flex;
                align-items: center;
                justify-content: center;
                text-align: center;
                border-radius: 20px;
                border: 1px solid white;
                background-color: green;
            }
        </style>
    </head>
    <body>
        <div id="main-body">
        <div id="join-area">
            <!--<div id="room-name-caption">Room: </div> 
            <p id="room-name-area"><select id="room-name-input"> 
                    <option>public</option>
                </select>
            </p>
            <div id="user-name-caption">Screen name: </div> 
            <p id="user-name-area"><input id="user-name-input"></p>
        -->
            <p id="tips-caption">Tips:</p>
            <ul>
                <li>Wear Headphones to avoid feedback!</li>
                <li>MIDI works on Chrome</li>
                <li>Your computer keyboard plays notes too</li>
                <li id="apple-tip">Touch the Play button if a video doesn't auto-start</li>
            </ul>
            <button id="join-button">Ready!</button>    
            
        </div>

        <div id="view-controls">
            <button id="disconnect-button">Disconnect</button>
            <!--Settings: <select id="select-instrument"><select>-->
            <button id="fullscreen-button">Fullscreen</button>    
            <button id="error-log-button">Log</button>
            
        </div>
        
        <div id="standard">
            <div id="user-list">
                <div id="you" class="user-panel">
                    <div id="your-name" class="user-name"></div>
                </div>    
            </div>


            <div id="big-piano">
            </div>
            
        </div>


        <div id="work-area">
        </div>


        </div>


        <div id="error-log-box"><div id="error-log"></div></div>
        <div id="activity-log"></div>

        <script>

        var isErrorLogShowing = false
        var errorLogButton = document.getElementById("error-log-button")
        var errorLogBox = document.getElementById("error-log-box")
        var errorLog = document.getElementById("error-log")

        var logError = message => {
            errorLogButton.style.color = "red"
            var div = document.createElement("div")
            div.innerHTML = message.split("\n").join("<br>")
            errorLog.appendChild(div)
        }

        window.onerror = e => {
            logError(e)
            console.error(e)
            return true
        }

        errorLogButton.onclick = e => {
            errorLogBox.style.display = isErrorLogShowing ? "none" : "block"
            isErrorLogShowing = !isErrorLogShowing
        }

        </script>


        <!--<script src="/socket.io/socket.io.js"></script>-->
        <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
        <script src="/js/omgrtc.js"></script>
        <script src="/js/omgservice.js"></script>
        <script src="/apps/music/js/omgservice_music.js"></script>
        <script src="/apps/music/js/vertical_surface.js"></script>
        <script src="/apps/music/js/sequencer_surface.js"></script>
        <script src="/apps/music/js/libs/peakmeter_basic.js"></script>
        <script src="/apps/music/js/webmidi.js"></script>
        <script src="/apps/dawesome/js/dawesome_fragments.js"></script>
        <script src="/apps/dawesome/js/slider_canvas.js"></script>
        <script src="drumset_surface.js"></script>
        
        <script type="module">
        import OMGMusicChat from "./chat.js"
        import Dawesome from "/apps/dawesome/js/dawesome.js"
        
        var isTeacher = false
        var roomName = ""
        var userName
        omg.getContext().then(ctx => {

            if (typeof ctx.pageParams.demo === "string") {
                var today = new Date()
                var time = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds() + "_"
                roomName = "demo" + time + Math.floor((Math.random() * 1000)) 
                userName = roomName
            }
            else {
                roomName = "t=" + encodeURIComponent(ctx.pageParams.t) + "&s=" + encodeURIComponent(ctx.pageParams.s)
                if (!ctx.user) {
                    // no user, go to student mode
                    userName = ctx.pageParams.s
                }
                else if (ctx.user.username === ctx.pageParams.t) {
                    isTeacher = true
                    userName = ctx.pageParams.t
                }
                else {
                    console.warn("hello?")
                    // maybe a student is logged in? only teachers should have logins
                }
            }
            var drumset = new DrumsetSurface(document.getElementById("big-piano"))
            musicChat = new OMGMusicChat(rt, drumset)
            musicChat.setupPlayer()

            join()
        })

        var userListEl = document.getElementById('user-list')

        var rt = new OMGRealTime() //"https://openmedia.gallery/")
        rt.acceptAllCalls = true

        //!!!!! todo remove, only here because webcam indicator light is annoying
        //rt.suppressLocalVideo = window.location.host.startsWith("localhost")

        var activityLog = document.getElementById("activity-log")
        var log = text => {
            console.log(text)
            activityLog.innerHTML = text + "<br>" + activityLog.innerHTML
            //activityLog.innerHTML += text + "<br>"
        }

        rt.onlog = (text) => {
            //log(text)
        }

        var musicChat

        var you = {div: document.getElementById("you")}
        var controls = document.getElementById("view-controls")
        var join = () => {
        
            roomName = window.location.pathname + "?" + roomName
            
            document.getElementById("your-name").innerHTML = userName

            rt.getUserMedia(video => {
                you.div.appendChild(video)
                you.video = video
                you.video.style.width = "25%"
                rt.join(roomName, userName, {type: "CHAT"})
            })
            //joinArea.style.display = "none"
            //controls.style.display = "block"
            //disconnectButton.style.display = "block"
            //standard.style.display = "block"

        }

        var disconnectButton = document.getElementById("disconnect-button")
        disconnectButton.onclick = () => {
            rt.closeConnections()
            rt.stopMedia()
            rt.leave()
            userListEl.innerHTML = "(Disconnected)"
            //setTimeout(() => {window.location = "thankyou.htm"}, 250)
        }
    
        var workBoxDiv = document.getElementById("work-area")
        var workBox

        rt.onjoined = (room) => {
            console.log("onjoined!!!!!!")
            
            musicChat.setupLocalUser(you)

            disconnectButton.innerHTML = "Disconnect"
            for (var user in room.users) {
                if (!room.users[user].peerConnection) {
                    rt.callUser(user)
                }
            }

            if (!workBox) {
                //workBox = new ChatWorkBox({rt, div: workBoxDiv})
                var transportWindowConfig = {
                    x: 0, y: workBoxDiv.offsetTop,
                    width: 90, height: workBoxDiv.clientHeight,
                    moveable: false, closeable: false, resizeable: false
                }
                var timelineWindowConfig = {
                    x: 90, y: workBoxDiv.offsetTop,
                    width: window.innerWidth - transportWindowConfig.width, height: workBoxDiv.clientHeight,
                    moveable: false, closeable: false, resizeable: false
                }
                var mixerWindowConfig = {hidden: true}
                var fxWindowConfig = {hidden: true}
                //workBox = new Dawesome({rt, div: workBoxDiv, timelineWindowConfig, transportWindowConfig, mixerWindowConfig})
            }
        }

        
        rt.onnewuser = (name, user) => {
            console.log(name + "joined")
            log(name + " joined")
            var userEl = document.createElement("div")
            userEl.className = "user-panel"
            var nameEl = document.createElement("div")
            nameEl.className = "user-name"
            nameEl.innerHTML = name
            var videoEl = user.video
            userEl.appendChild(nameEl)
            userEl.appendChild(videoEl)
            userListEl.appendChild(userEl)
            user.div = userEl

            musicChat.setupUser(user)
        }
        
        rt.onuserleft = (name, user) => {
            log(name + " left")
            userListEl.removeChild(user.div)
        }

        rt.onuserdisconnected = (name, user) => {
            if (user.disconnected && user.peerConnection.connectionState !== "connected") {
                user.div.style.display = "none"
            }
        }
        rt.onuservideodisconnected = rt.onuserdisconnected

        rt.onuserreconnected = (name, user) => {
            user.div.style.display = "block"
        }
        
        rt.ondisconnect = () => {
            //connectedStatusEl.innerHTML = "not connected"
            console.log("disconnected")
            disconnectButton.innerHTML = "Disconnect."
            //disconnectButton.style.display = "none"
            //joinArea.style.display = "block"
        };

        var fullscreen = false
        document.getElementById("fullscreen-button").onclick = (e) => {
            if (fullscreen) {
                document.exitFullscreen();
            }
            else {
                document.body.requestFullscreen();
            }
            fullscreen = !fullscreen
        }

        

        rt.oncommand = (data) => {
            
        }


        if (navigator.userAgent.indexOf("iPhone") > -1 ||
            navigator.userAgent.indexOf("iPad") > -1 ||
            navigator.userAgent.indexOf("Mac OS X") > -1) {
                document.getElementById("apple-tip").style.visibility = "visible"
            }

        
        </script>
    </body>
</html>